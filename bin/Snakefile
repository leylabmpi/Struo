from distutils.spawn import find_executable

# onsuccess/error
## funcs
def write_config(out_file):
    out_dir = os.path.split(out_file)[0]
    if not os.path.isdir(out_dir):
        os.makedirs(out_dir)
    config_tmp = {k:(v.to_string(max_rows=1, max_cols=10) if isinstance(v, pd.DataFrame) else v) \
                  for k,v in config.items()}
    with open(out_file, 'w') as outF:
        json.dump(config_tmp, outF, indent=4)

def file_atch(file_path, file_type):
    """ Attachments for email
    """
    if os.path.isfile(file_path) and os.stat(file_path).st_size > 0:
        attach = '-a {}'.format(file_path)   
        file_path = os.path.split(file_path)[1]
        msg = 'See attached {} file: {}'.format(file_type, file_path)
    else:
        attach = ''
        file_path = os.path.split(file_path)[1]
        msg = 'WARNING: could not attach {}: {}'.format(file_type, file_path)
    return attach,msg

def email_with_atch(email, title, rpt_file, config_json):
    """ Using mutt to send email with attachments
    """
    rpt_atch,rpt_msg = file_atch(rpt_file, 'job report')
    cfg_atch,cfg_msg = file_atch(config_json, 'pipeline config')
    body = '\n'.join([rpt_msg, cfg_msg,
                      'Snakemake pipeline location: {}'.format(workflow.basedir)])
    cmd = "echo '{body}' | mutt {attch1} {attch2} -s '{title}' -- {email}"
    cmd = cmd.format(body=body, attch1=rpt_atch, attch2=cfg_atch, title=title, email=email)
    shell(cmd)

def email_no_atch(email, title):
    """ Using mail(x) to send email without attachments
    """
    body = 'WARNING: the config & report files could not be attached to this email.'
    body += ' Check that "mutt" is installed and properly working.'
    cmd = "echo '{body}' | {exe} -s '{title}' {email}"
    try:
        shell(cmd.format(body=body, exe='mailx', title=title, email=email))
    except subprocess.CalledProcessError:
        shell(cmd.format(body=body, exe='mail', title=title, email=email))
       
def send_email(rpt_file, email, config, pipeline='LL_pipeline', success=True):
    # json of config
    config_json = os.path.join(config['tmp_dir'], 'job_config.json')
    write_config(config_json)    
    # email
    title = '{} finished successfully' if success is True else '{} => error occurred'
    title = title.format(pipeline)
    try:
        ## with attachemnts
        email_with_atch(email, title, rpt_file, config_json)
    except subprocess.CalledProcessError:
        ## without attachments
        email_no_atch(email, title)    
    # cleanup
    os.remove(rpt_file)
    os.remove(config_json)
    
def mk_cmd(success=True):
    msg = 'complete' if success is True else 'error'
    print('Pipeline {}! Creating report...'.format(msg))
    exe = os.path.join(config['pipeline']['script_folder'], 'log_summarize.py')
    rpt_file = os.path.join(config['tmp_dir'], 'job_report.csv')
    cmd = '{exe} {{log}} > {rpt_file}'.format(exe=exe, rpt_file=rpt_file)
    return rpt_file, cmd


## call
onsuccess:
    rpt_file,cmd = mk_cmd(success=True)
    try:
        shell(cmd)
    except subprocess.CalledProcessError:
        print('WARNING: could not parse snakemake log file')
    send_email(rpt_file, config['pipeline']['email'], config, pipeline='Struo', success=True)

onerror:
    rpt_file,cmd = mk_cmd(success=False)
    try:
        shell(cmd)
    except subprocess.CalledProcessError:
        print('WARNING: could not parse snakemake log file')
    send_email(rpt_file, config['pipeline']['email'], config, pipeline='Struo', success=False)
 
